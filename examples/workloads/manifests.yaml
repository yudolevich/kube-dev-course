---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: app
spec:
  selector:
    matchLabels:
      app: app
  podManagementPolicy: OrderedReady
  replicas: 1
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - name: app
        image: app:test
        imagePullPolicy: Never
        resources:
          limits:
            memory: 300Mi
          requests:
            memory: 100Mi
        volumeMounts:
        - name: data
          mountPath: /tmp
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 300Mi
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: app
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: app
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 60
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app: app
  name: app
spec:
  jobTemplate:
    metadata:
      name: app
    spec:
      template:
        metadata:
          labels:
            app: app-job
        spec:
          containers:
          - image: alpine/k8s:1.25.8
            name: app
            command:
            - /bin/bash
            - /script/job.sh
            resources: {}
            volumeMounts:
            - name: script
              mountPath: /script
          restartPolicy: OnFailure
          volumes:
          - name: script
            configMap:
              name: app-job-sh
  schedule: '*/5 * * * *'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: app
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - configmaps
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: app
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app
data:
  max: "500"
  size: "10"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-job-sh
data:
  job.sh: |
    #!/bin/bash
    set -e

    NAME="app"
    ADD="10"

    data="$(kubectl get configmap "$NAME" -o json)"
    max="$(echo "$data" | jq -rc '.data.max')"
    size="$(echo "$data" | jq -rc '.data.size')"

    size="$((size + ADD))"
    if [[ "$size" -gt "$max" ]];then
      size="$max"
    fi

    pods=($(kubectl get pods -l app="$NAME" -o name))
    count="${#pods[@]}"
    pod_size="$((size/count))"

    for pod in "${pods[@]}";do
      echo "$pod - $pod_size"
      kubectl exec "$pod" -- /bin/sh -c \
        "dd if=/dev/zero of=/tmp/data.tmp bs=1M count=$pod_size;mv /tmp/data.tmp /tmp/data"
    done

    kubectl patch configmap "$NAME" -p "{\"data\":{\"size\":\"$size\"}}"
